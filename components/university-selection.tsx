"use client"

import { useState, useMemo } from "react"
import { Button } from "@/components/ui/button"
import { Card } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import type { CalendarEvent } from "./event-modal"

interface Direction {
  id: number
  name: string
  code: string
  budgetPlaces: number
  passingScore: number
}

interface University {
  id: number
  name: string
  shortName: string
  logo: string
  directions: Direction[]
}

type OlympiadType = "–ë–í–ò" | "100 –±–∞–ª–ª–æ–≤"

interface Olympiad {
  id: number
  name: string
  level: string | number
  type: OlympiadType
  subject: string
  validYears: string
  registration: string
  qualifying: string
  final: string
  features: string
  faculty?: string
  groups?: string[]
  requirementNote?: string
  appliesToSubjects?: string[]
  universityShortName?: string
}

interface UniversitySelectionProps {
  onAddToCalendar?: (event: CalendarEvent) => void
}

// ------------------------ –í–£–ó–´ ------------------------
const universities: University[] = [
  {
    id: 1,
    name: "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω—ã–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –∏–º–µ–Ω–∏ –ú.–í. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞",
    shortName: "–ú–ì–£",
    logo: "üèõÔ∏è",
    directions: [
      { id: 1, name: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞", code: "01.03.01", budgetPlaces: 120, passingScore: 350 },
      { id: 2, name: "–§–∏–∑–∏–∫–∞", code: "03.03.02", budgetPlaces: 180, passingScore: 340 },
      { id: 3, name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", code: "09.03.01", budgetPlaces: 90, passingScore: 360 },
    ],
  },
  {
    id: 2,
    name: "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —Ñ–∏–∑–∏–∫–æ-—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω—Å—Ç–∏—Ç—É—Ç",
    shortName: "–ú–§–¢–ò",
    logo: "üöÄ",
    directions: [
      { id: 4, name: "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –∏ —Ñ–∏–∑–∏–∫–∞", code: "03.03.01", budgetPlaces: 300, passingScore: 340 },
      { id: 5, name: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ –∏ –≤—ã—á–∏—Å–ª–∏—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", code: "09.03.01", budgetPlaces: 180, passingScore: 350 },
    ],
  },
]

// ------------------------ –ë–ê–ó–û–í–´–ï –û–õ–ò–ú–ü–ò–ê–î–´ –ü–û –ü–†–û–§–ò–õ–Æ ------------------------
const olympiads: Record<number, Olympiad[]> = {
  1: [
    {
      id: 1,
      name: "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ (–í—Å–û–®)",
      level: "–í—Å–û–®",
      type: "–ë–í–ò",
      subject: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
      validYears: "10-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-01",
      qualifying: "2025-10-15",
      final: "2025-04-10",
      features: "–ë–í–ò –≤ –≤–µ–¥—É—â–∏–µ –≤—É–∑—ã –†–æ—Å—Å–∏–∏",
    },
    {
      id: 2,
      name: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞",
      level: 1,
      type: "–ë–í–ò",
      subject: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
      validYears: "9-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-15",
      qualifying: "2025-11-01",
      final: "2025-03-15",
      features: "–ë–í–ò –≤ –ú–ì–£, –ú–§–¢–ò, –í–®–≠",
    },
    {
      id: 3,
      name: "–¢—É—Ä–Ω–∏—Ä –≥–æ—Ä–æ–¥–æ–≤",
      level: 1,
      type: "–ë–í–ò",
      subject: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
      validYears: "8-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-20",
      qualifying: "2025-10-20",
      final: "2025-04-10",
      features: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞, –ë–í–ò –≤ —Ç–æ–ø-–≤—É–∑—ã",
    },
  ],
  2: [
    {
      id: 4,
      name: "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ —Ñ–∏–∑–∏–∫–µ (–í—Å–û–®)",
      level: "–í—Å–û–®",
      type: "–ë–í–ò",
      subject: "–§–∏–∑–∏–∫–∞",
      validYears: "10-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-01",
      qualifying: "2025-10-20",
      final: "2025-12-12",
      features: "–í–∫–ª—é—á–∞–µ—Ç —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∏ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —Ç—É—Ä—ã",
    },
    {
      id: 5,
      name: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤",
      level: 1,
      type: "–ë–í–ò",
      subject: "–§–∏–∑–∏–∫–∞",
      validYears: "9-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-15",
      qualifying: "2025-11-05",
      final: "2025-12-18",
      features: "–°–∏–ª—å–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –ú–æ—Å–∫–≤—ã",
    },
  ],
}

// ------------------------ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û –ü–†–û–§–ò–õ–Æ ------------------------
const generateOlympiadsForDirection = (directionId: number, directionName: string): Olympiad[] => {
  const baseOlympiads: Olympiad[] = []

  let subject = "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
  if (directionName.toLowerCase().includes("—Ñ–∏–∑")) subject = "–§–∏–∑–∏–∫–∞"
  else if (
      directionName.includes("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞") ||
      directionName.includes("–ü—Ä–æ–≥—Ä–∞–º–º–Ω–∞—è") ||
      directionName.toLowerCase().includes("–∏–Ω—Ñ–æ—Ä–º")
  )
    subject = "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
  else if (directionName.toLowerCase().includes("—ç–∫–æ–Ω–æ–º")) subject = "–≠–∫–æ–Ω–æ–º–∏–∫–∞"
  else if (directionName.toLowerCase().includes("—Ö–∏–º")) subject = "–•–∏–º–∏—è"
  else if (directionName.toLowerCase().includes("–±–∏–æ")) subject = "–ë–∏–æ–ª–æ–≥–∏—è"
  else if (directionName.toLowerCase().includes("–∏—Å—Ç–æ—Ä")) subject = "–ò—Å—Ç–æ—Ä–∏—è"
  else if (directionName.toLowerCase().includes("—Ñ–∏–ª–æ–ª–æ–≥") || directionName.toLowerCase().includes("–ª–∏–Ω–≥–≤"))
    subject = "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫"
  else if (directionName.toLowerCase().includes("–∂—É—Ä–Ω–∞–ª–∏—Å—Ç")) subject = "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞"
  else if (directionName.toLowerCase().includes("—é—Ä–∏—Å–ø—Ä—É–¥")) subject = "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"
  else if (directionName.toLowerCase().includes("–≥–µ–æ–ª–æ–≥") || directionName.toLowerCase().includes("–≥–µ–æ–≥—Ä–∞—Ñ"))
    subject = "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"

  baseOlympiads.push({
    id: directionId * 1000,
    name: `–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ ${subject.toLowerCase()} (–í—Å–û–®)`,
    level: "–í—Å–û–®",
    type: "–ë–í–ò",
    subject,
    validYears: "10-11 –∫–ª–∞—Å—Å",
    registration: "2025-09-01",
    qualifying: "2025-10-15",
    final: "2025-04-10",
    features: `–°–∞–º–∞—è –ø—Ä–µ—Å—Ç–∏–∂–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –ø–æ ${subject.toLowerCase()}. –î–∞–µ—Ç –ë–í–ò –Ω–∞ –≤—Å–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ –ø—Ä–æ—Ñ–∏–ª—é.`,
  })

  if (subject === "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞") {
    baseOlympiads.push({
      id: directionId * 1000 + 1,
      name: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤",
      level: 1,
      type: "–ë–í–ò",
      subject: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
      validYears: "9-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-15",
      qualifying: "2025-11-01",
      final: "2025-03-15",
      features: "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è",
    })
    baseOlympiads.push({
      id: directionId * 1000 + 2,
      name: "–¢—É—Ä–Ω–∏—Ä –≥–æ—Ä–æ–¥–æ–≤",
      level: 1,
      type: "–ë–í–ò",
      subject: "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
      validYears: "8-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-20",
      qualifying: "2025-10-20",
      final: "2025-03-20",
      features: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞",
    })
  } else if (subject === "–§–∏–∑–∏–∫–∞") {
    baseOlympiads.push({
      id: directionId * 1000 + 1,
      name: "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤",
      level: 1,
      type: "–ë–í–ò",
      subject: "–§–∏–∑–∏–∫–∞",
      validYears: "9-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-15",
      qualifying: "2025-11-05",
      final: "2025-04-18",
      features: "–°–∏–ª—å–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ –ú–æ—Å–∫–≤—ã",
    })
    baseOlympiads.push({
      id: directionId * 1000 + 2,
      name: "–û–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ ¬´–§–∏–∑—Ç–µ—Ö¬ª",
      level: 1,
      type: "–ë–í–ò",
      subject: "–§–∏–∑–∏–∫–∞",
      validYears: "9-11 –∫–ª–∞—Å—Å",
      registration: "2025-10-01",
      qualifying: "2025-11-10",
      final: "2025-01-25",
      features: "–û–ª–∏–º–ø–∏–∞–¥–∞ –ú–§–¢–ò –ø–æ —Ñ–∏–∑–∏–∫–µ",
    })
  } else if (subject === "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞") {
    baseOlympiads.push({
      id: directionId * 1000 + 1,
      name: "–û—Ç–∫—Ä—ã—Ç–∞—è –æ–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é",
      level: 1,
      type: "–ë–í–ò",
      subject: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
      validYears: "9-11 –∫–ª–∞—Å—Å",
      registration: "2025-10-01",
      qualifying: "2025-11-10",
      final: "2025-01-15",
      features: "–°–ø–æ—Ä—Ç–∏–≤–Ω–æ–µ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ",
    })
    baseOlympiads.push({
      id: directionId * 1000 + 2,
      name: "–û–ª–∏–º–ø–∏–∞–¥–∞ —à–∫–æ–ª—å–Ω–∏–∫–æ–≤ –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—é ¬´–¢–µ—Ö–Ω–æ–ö—É–±–æ–∫¬ª",
      level: 2,
      type: "100 –±–∞–ª–ª–æ–≤",
      subject: "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
      validYears: "8-11 –∫–ª–∞—Å—Å",
      registration: "2025-09-25",
      qualifying: "2025-11-15",
      final: "2025-01-20",
      features: "–î–∞—ë—Ç 100 –±–∞–ª–ª–æ–≤ –ï–ì–≠ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ 75+), –±–µ–∑ –ë–í–ò –¥–ª—è —Ä—è–¥–∞ –≤—É–∑–æ–≤",
    })
  }

  return baseOlympiads
}

const UniversitySelection = ({ onAddToCalendar }: UniversitySelectionProps) => {
  const [selectedOlympiads, setSelectedOlympiads] = useState<number[]>([])
  const [selectedDirection, setSelectedDirection] = useState<number | null>(null)
  const [selectedUniversity, setSelectedUniversity] = useState<number | null>(null)
  const [searchQuery, setSearchQuery] = useState("")
  const [modalData, setModalData] = useState<{
    isOpen: boolean
    olympiad?: Olympiad
    eventType?: "registration" | "qualifying" | "final"
  }>({ isOpen: false })

  const handleSelectOlympiad = (olympiadId: number) => {
    setSelectedOlympiads((prev) =>
        prev.includes(olympiadId) ? prev.filter((id) => id !== olympiadId) : [...prev, olympiadId],
    )
  }

  const directionOlympiads = selectedDirection
      ? generateOlympiadsForDirection(
          selectedDirection,
          universities.flatMap((u) => u.directions).find((d) => d.id === selectedDirection)?.name || "",
      )
      : []

  const showEventModal = (olympiad: Olympiad, eventType: "registration" | "qualifying" | "final") => {
    setModalData({
      isOpen: true,
      olympiad,
      eventType,
    })
  }

  const handleAddToCalendar = (event: CalendarEvent) => {
    if (onAddToCalendar) {
      onAddToCalendar(event)
    }
    setModalData({ isOpen: false })
  }

  const filteredUniversities = universities.filter(
      (university) =>
          university.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
          university.shortName.toLowerCase().includes(searchQuery.toLowerCase()),
  )

  const subjectFromDirection = (name?: string) => {
    if (!name) return "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
    const n = name.toLowerCase()
    if (n.includes("—Ñ–∏–∑")) return "–§–∏–∑–∏–∫–∞"
    if (n.includes("–∏–Ω—Ñ–æ—Ä–º") || n.includes("–ø—Ä–æ–≥—Ä–∞–º–º")) return "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞"
    if (n.includes("—Ö–∏–º")) return "–•–∏–º–∏—è"
    if (n.includes("–±–∏–æ")) return "–ë–∏–æ–ª–æ–≥–∏—è"
    if (n.includes("—ç–∫–æ–Ω")) return "–≠–∫–æ–Ω–æ–º–∏–∫–∞"
    if (n.includes("—é—Ä–∏—Å–ø—Ä—É–¥")) return "–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ"
    if (n.includes("–≥–µ–æ–ª–æ–≥") || n.includes("–≥–µ–æ–≥—Ä–∞—Ñ")) return "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è"
    return "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"
  }

  const directionContext = useMemo(() => {
    if (!selectedDirection) return null
    const direction = universities.flatMap((u) => u.directions).find((d) => d.id === selectedDirection)
    const uni = universities.find((u) => u.directions.some((d) => d.id === selectedDirection))
    const subj = subjectFromDirection(direction?.name)
    return { direction, uni, subj }
  }, [selectedDirection])

  if (selectedDirection) {
    const direction = universities.flatMap((u) => u.directions).find((d) => d.id === selectedDirection)

    return (
        <div className="p-4 space-y-4">
          <div className="flex items-center gap-2 mb-4">
            <Button variant="ghost" size="sm" onClick={() => setSelectedDirection(null)} className="text-primary">
              ‚Üê –ù–∞–∑–∞–¥
            </Button>
          </div>

          <div className="bg-light-gray p-4 rounded-lg mb-4">{/* Render direction olympiads here */}</div>
        </div>
    )
  }

  return (
      <div className="p-4 space-y-4">
        <Input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –≤—É–∑–∞"
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="mb-4"
        />

        {filteredUniversities.map((university) => (
            <Card key={university.id} className="p-4 mb-4">
              <div className="flex items-center gap-2">
                <span className="text-2xl">{university.logo}</span>
                <div>
                  <h3 className="font-bold">{university.name}</h3>
                  <p className="text-sm text-muted-foreground">{university.shortName}</p>
                </div>
              </div>

              <div className="mt-4 space-y-2">
                {university.directions.map((direction) => (
                    <Button
                        key={direction.id}
                        variant="outline"
                        onClick={() => setSelectedDirection(direction.id)}
                        className="w-full"
                    >
                      {direction.name}
                    </Button>
                ))}
              </div>
            </Card>
        ))}
      </div>
  )
}

export { UniversitySelection }
